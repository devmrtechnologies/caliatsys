{"version":3,"sources":["ng://@caliatys/cognito-service/lib/models/cognito-service-response.model.ts","ng://@caliatys/cognito-service/lib/enums/auth-type.enum.ts","ng://@caliatys/cognito-service/lib/enums/resp-type.enum.ts","ng://@caliatys/cognito-service/lib/cognito.service.ts"],"names":["CognitoServiceResponse","type","data","this","COGNITO","GOOGLE","FACEBOOK","ON_SUCCESS","ON_FAILURE","ON_ERROR","ON_TIMEOUT","ON_REJECTED","NEW_PASSWORD_REQUIRED","INPUT_VERIFICATION_CODE","MFA_REQUIRED","MFA_SETUP_ASSOCIATE_SECRETE_CODE","MFA_SETUP_ON_FAILURE","EXPIRED_TOKEN","AUTHENTICATE","REFRESH","LOGOUT","CognitoService","cognitoConst","poolData","UserPoolId","ClientId","onSignIn","EventEmitter","onSignOut","storagePrefix","googleId","googleScope","identityPool","region","adminAccessKeyId","adminSecretKeyId","prototype","isAuthenticated","getRemaining","sts","Promise","resolve","reject","AWS.STS","getCallerIdentity","err","console","error","autoRefreshSession","_this","expiresAt","getExpiresAt","timeDiff","getTime","Date","now","signOut","setTimeout","refreshSession","then","_","catch","remaining","max","storageKey","expiresAtStr","expiresAtNum","expiresAtDat","localStorage","getItem","Number","getUsername","getProvider","getIdToken","getTokens","tokensStr","JSON","parse","initCredentials","AWS.config","credentials","AWS.CognitoIdentityCredentials","IdentityPoolId","getCredentials","get","updateCredentials","clientConfig","provider","idToken","url","AuthType","toLowerCase","logins","options","Logins","info","getCognitoUser","username","cognitoUser","AWSCognito.CognitoUserPool","getCurrentUser","name_1","setCognitoUser","getUserAttributes","res","deleteAttributes","attributeList","getUserData","deleteUser","signUp","password","userAttributes","validationData","userPool","setUsername","response_1","RespType","response","confirmRegistration","verificationCode","forceAliasCreation","response_2","resendConfirmationCode","response_3","sendMFACode","mfaCode","mfaType","onSuccess","session","updateTokens","setProvider","emit","onFailure","getMFAOptions","response_4","setMfa","enableMfa","enableMFA","response_5","disableMFA","response_6","newPasswordRequired","newPassword","requiredAttributeData","completeNewPasswordChallenge","mfaRequired","challengeName","challengeParameters","forgotPassword","inputVerificationCode","getAttributeVerificationCode","confirmPassword","changePassword","oldPassword","response_7","adminCreateUser","setAdmin","params","Username","TemporaryPassword","cognitoIdentityServiceProvider","AWS.CognitoIdentityServiceProvider","adminDeleteUser","adminResetUserPassword","adminUpdateUserAttributes","UserAttributes","resetExpiredAccount","usernameKey","attributes","push","Name","Value","creds","AWS.Credentials","signIn","authenticateCognitoUser","callGoogle","GoogleAction","refreshCognitoSession","signOutCognito","clearStorage","authenticationData","Password","authenticationDetails","AWSCognito.AuthenticationDetails","authenticateUser","requiredAttributes","mfaSetup","associateSoftwareToken","associateSecretCode","secretCode","tokens","refreshToken","AWSCognito.CognitoRefreshToken","RefreshToken","response_8","initGoogle","client_id","scope","gapi","load","callback","auth2","init","googleAuth","reason","onerror","timeout","ontimeout","action","makeGoogle","authenticateGoogleUser","refreshGoogleSession","signOutGoogle","logoutResponse","defaultResponse","googleUser","googleResponse","getAuthResponse","googleProfile","getBasicProfile","getName","setIdToken","id_token","setExpiresAt","expires_at","onRejected","currentUser","reloadAuthResponse","disconnect","userData","Pool","AWSCognito.CognitoUser","setItem","toString","token","setTokens","tokensObj","accessToken","getAccessToken","getJwtToken","accessTokenExpiresAt","getExpiration","idTokenExpiresAt","getRefreshToken","getToken","stringify","removeItem","Injectable","args","providedIn","Inject","Optional"],"mappings":"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","sourcesContent":["export class CognitoServiceResponse\n{\n  public type : string;\n  public data : any;\n\n  constructor(type : string, data : any)\n  {\n    this.type = type;\n    this.data = data;\n  }\n}","export enum AuthType\n{\n  COGNITO  = 'cognito',\n  GOOGLE   = 'google',\n  FACEBOOK = 'facebook'\n}\n","export enum RespType\n{\n  ON_SUCCESS                       = 'onSuccess',\n  ON_FAILURE                       = 'onFailure',\n  ON_ERROR                         = 'onError',\n  ON_TIMEOUT                       = 'onTimeout',\n  ON_REJECTED                      = 'onRejected',\n  NEW_PASSWORD_REQUIRED            = 'newPasswordRequired',\n  INPUT_VERIFICATION_CODE          = 'inputVerificationCode',\n  MFA_REQUIRED                     = 'mfaRequired',\n  MFA_SETUP_ASSOCIATE_SECRETE_CODE = 'mfaSetup associateSecretCode',\n  MFA_SETUP_ON_FAILURE             = 'mfaSetup onFailure',\n  EXPIRED_TOKEN                    = 'expiredToken'\n}\n","// Angular modules\nimport { Injectable }             from '@angular/core';\nimport { Inject }                 from '@angular/core';\nimport { Optional }               from '@angular/core';\nimport { EventEmitter }           from '@angular/core';\n\n// External modules\nimport * as AWSCognito            from 'amazon-cognito-identity-js';\nimport * as AWS                   from 'aws-sdk';\nimport * as awsservice            from 'aws-sdk/lib/service';\n\n// Models\nimport { CognitoServiceResponse } from './models/cognito-service-response.model';\n\n// Enums\nimport { AuthType }               from './enums/auth-type.enum';\nimport { RespType }               from './enums/resp-type.enum';\n\nexport enum GoogleAction\n{\n  AUTHENTICATE = 'authenticate',\n  REFRESH      = 'refresh',\n  LOGOUT       = 'logout'\n}\n\n@Injectable({\n  providedIn : 'root'\n})\nexport class CognitoService\n{\n  public  onSignIn          : EventEmitter<null>;\n  public  onSignOut         : EventEmitter<null>;\n\n  // private MFA              : boolean = false;\n\n  private storagePrefix    : string;\n\n  private googleId         : string;\n  private googleScope      : string;\n\n  private poolData : AWSCognito.ICognitoUserPoolData = {\n    UserPoolId : null, // CognitoUserPool\n    ClientId   : null  // CognitoUserPoolClient\n  };\n\n  private identityPool     : string; // CognitoIdentityPool\n  private region           : string; // Region Matching CognitoUserPool region\n\n  private adminAccessKeyId : string;\n  private adminSecretKeyId : string;\n\n  private googleAuth       : gapi.auth2.GoogleAuth;\n  private cognitoUser      : AWSCognito.CognitoUser;\n\n  constructor\n  (\n    @Inject('cognitoConst') @Optional() public cognitoConst : any\n  )\n  {\n    this.onSignIn             = new EventEmitter();\n    this.onSignOut            = new EventEmitter();\n\n    this.storagePrefix       = cognitoConst.storagePrefix + '_CognitoService_';\n\n    this.googleId            = cognitoConst.googleId;\n    this.googleScope         = cognitoConst.googleScope;\n\n    this.poolData.UserPoolId = cognitoConst.poolData.UserPoolId;\n    this.poolData.ClientId   = cognitoConst.poolData.ClientId;\n\n    this.identityPool        = cognitoConst.identityPool;\n\n    this.region              = cognitoConst.region;\n    this.adminAccessKeyId    = cognitoConst.adminAccessKeyId;\n    this.adminSecretKeyId    = cognitoConst.adminSecretKeyId;\n  }\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Helpers --------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  // NOTE: Misc --------------------------------------------------------------------------------\n\n  public isAuthenticated() : boolean\n  {\n    if (this.getRemaining())\n      return true;\n    return false;\n  }\n\n  public sts() : Promise<AWS.STS.GetCallerIdentityResponse | AWS.AWSError>\n  {\n    return new Promise((resolve, reject) =>\n    {\n      let sts = new AWS.STS();\n      let params : AWS.STS.GetCallerIdentityRequest = null;\n      sts.getCallerIdentity(params, (err : AWS.AWSError, data : AWS.STS.GetCallerIdentityResponse) =>\n      {\n        if (data)\n          return resolve(data);\n        console.error('CognitoService : sts -> getCallerIdentity', err);\n        return reject(err);\n      });\n    });\n  }\n\n  // NOTE: Session -----------------------------------------------------------------------------\n\n  public autoRefreshSession() : void\n  {\n    let expiresAt = this.getExpiresAt();\n    if (!expiresAt)\n      return;\n\n    let timeDiff = expiresAt.getTime() - Date.now() - 60000; // 1 min\n\n    if (timeDiff < 0)\n    {\n      this.signOut();\n      return;\n    }\n\n    setTimeout(() =>\n    {\n      // Refresh token\n      this.refreshSession().then(_ =>\n      {\n        this.autoRefreshSession();\n      }).catch(_ =>\n      {\n        this.signOut();\n      });\n    }, timeDiff);\n  }\n\n  public getRemaining() : number\n  {\n    let remaining : number = 0;\n    let now       : number = 0;\n    let max       : Date   = null;\n    now = Date.now();\n    max = this.getExpiresAt();\n\n    if (!max)\n      return null;\n    remaining = max.getTime() - now;\n    if (remaining <= 0)\n      return null;\n    return remaining;\n  }\n\n  public getExpiresAt() : Date\n  {\n    let storageKey   : string = null;\n    let expiresAtStr : string = null;\n    let expiresAtNum : number = null;\n    let expiresAtDat : Date   = null;\n    storageKey   = this.storagePrefix + 'ExpiresAt';\n    expiresAtStr = localStorage.getItem(storageKey);\n    if (expiresAtStr)\n    {\n      expiresAtNum = Number(expiresAtStr);\n      if (expiresAtNum)\n        expiresAtDat = new Date(expiresAtNum);\n    }\n    return expiresAtDat;\n  }\n\n  // NOTE: Username ----------------------------------------------------------------------------\n\n  public getUsername() : string\n  {\n    let storageKey : string = null;\n    let provider   : string = null;\n    storageKey = this.storagePrefix + 'Username';\n    provider   = localStorage.getItem(storageKey);\n    return provider;\n  }\n\n  // NOTE: Provider ----------------------------------------------------------------------------\n\n  public getProvider() : string\n  {\n    let storageKey : string = null;\n    let provider   : string = null;\n    storageKey = this.storagePrefix + 'Provider';\n    provider   = localStorage.getItem(storageKey);\n    return provider;\n  }\n\n  // NOTE: Token -------------------------------------------------------------------------------\n\n  public getIdToken() : string\n  {\n    let storageKey : string = null;\n    let idToken    : string = null;\n    storageKey = this.storagePrefix + 'IdToken';\n    idToken    = localStorage.getItem(storageKey);\n    return idToken;\n  }\n\n  public getTokens() : any\n  {\n    let storageKey : string = null;\n    let tokensStr  : string = null;\n    let tokensObj  : any    = null;\n    storageKey = this.storagePrefix + 'SessionTokens';\n    tokensStr  = localStorage.getItem(storageKey);\n    tokensObj  = JSON.parse(tokensStr);\n    return tokensObj;\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Credentials ----------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  public initCredentials() : void\n  {\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId : this.identityPool,\n    });\n    AWS.config.region = this.region;\n  }\n\n  public getCredentials() : Promise<any>\n  {\n    return new Promise((resolve, reject) =>\n    {\n      let credentials = AWS.config.credentials as any;\n      if (!credentials)\n      {\n        let error = 'You must initialize the credentials with initCredentials()';\n        console.error('CognitoService : getCredentials', error);\n        return reject(error);\n      }\n      credentials.get((err) =>\n      {\n        if (err)\n        {\n          console.error('CognitoService : getCredentials', err);\n          return reject(err);\n        }\n        return resolve(AWS.config.credentials);\n      });\n    });\n  }\n\n  public updateCredentials(clientConfig ?: awsservice.ServiceConfigurationOptions) : void\n  {\n    let url      : string = null;\n    let provider : string = null;\n    let idToken  : string = null;\n\n    provider = this.getProvider();\n    idToken  = this.getIdToken();\n\n    switch (provider)\n    {\n      case AuthType.COGNITO :\n        url = 'cognito-idp.' + this.region.toLowerCase() + '.amazonaws.com/' + this.poolData.UserPoolId;\n        break;\n      case AuthType.GOOGLE :\n        url = 'accounts.google.com';\n        break;\n      default :\n        console.error('CognitoService : setCredentials -> Provider not recognized');\n        return;\n    }\n\n    let logins : any = {};\n    logins[url] = idToken;\n\n    if (!this.identityPool)\n    {\n      console.info('We recommend that you provide an identity pool ID from a federated identity');\n      return;\n    }\n\n    let options : AWS.CognitoIdentityCredentials.CognitoIdentityOptions = {\n      IdentityPoolId : this.identityPool,\n      Logins         : logins\n    };\n\n    AWS.config.region      = this.region;\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials(options, clientConfig);\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: User -----------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  public getCognitoUser(username : string = null) : AWSCognito.CognitoUser\n  {\n    if (this.cognitoUser)\n      return this.cognitoUser; // User stored in the service\n\n    let cognitoUser : AWSCognito.CognitoUser = null;\n    let cognitoUserPool = new AWSCognito.CognitoUserPool(this.poolData);\n\n    cognitoUser = cognitoUserPool.getCurrentUser(); // Authenticated user\n\n    if (!cognitoUser)\n    {\n      let name : string = null;\n      if (username)\n        name = username; // User sent\n      else\n        name = this.getUsername(); // User stored in local storage\n      cognitoUser = this.setCognitoUser(name);\n    }\n\n    return cognitoUser;\n  }\n\n  public getUserAttributes() : any\n  {\n    let cognitoUser = this.getCognitoUser();\n    cognitoUser.getUserAttributes((err : Error, res : AWSCognito.CognitoUserAttribute[]) =>\n    {\n      if (res)\n        return res;\n      console.error('CognitoService : getUserAttributes -> getUserAttributes', err);\n    });\n  }\n\n  public deleteAttributes(attributeList : string[]) : any\n  {\n    let cognitoUser = this.getCognitoUser();\n    cognitoUser.deleteAttributes(attributeList, (err : Error, res : string) =>\n    {\n      if (res)\n        return res;\n      console.error('CognitoService : deleteAttributes -> deleteAttributes', err);\n    });\n  }\n\n  public getUserData() : any\n  {\n    let cognitoUser = this.getCognitoUser();\n    cognitoUser.getUserData((err : Error, res : AWSCognito.UserData) =>\n    {\n      if (res)\n        return res;\n      console.error('CognitoService : getUserData -> getUserData', err);\n    });\n  }\n\n  public deleteUser() : any\n  {\n    let cognitoUser = this.getCognitoUser();\n    cognitoUser.deleteUser((err : Error, res : string) =>\n    {\n      if (res)\n        return res;\n      console.error('CognitoService : deleteUser -> deleteUser', err);\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Registration ---------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  /**\n   * Register a new user\n   *\n   * @param username\n   * @param password\n   * @param userAttributes - Optional parameter\n   * @param validationData - Optional parameter\n   */\n  public signUp(username : string, password : string, userAttributes : AWSCognito.CognitoUserAttribute[] = [], validationData : AWSCognito.CognitoUserAttribute[] = []) : Promise<CognitoServiceResponse>\n  {\n    let userPool = new AWSCognito.CognitoUserPool(this.poolData);\n\n    return new Promise((resolve, reject) =>\n    {\n      userPool.signUp(username, password, userAttributes, validationData, (err : Error, res : AWSCognito.ISignUpResult) =>\n      {\n        if (res)\n        {\n          this.setUsername(username);\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : signUp -> signUp', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  /**\n   * Confirm the signUp action\n   *\n   * @param verificationCode\n   * @param forceAliasCreation - Optional parameter\n   */\n  public confirmRegistration(verificationCode : string, forceAliasCreation : boolean = false) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.confirmRegistration(verificationCode, forceAliasCreation, (err : any, res : any) =>\n      {\n        if (res)\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : confirmRegistration -> confirmRegistration', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  /**\n   * Resend the signUp confirmation code\n   */\n  public resendConfirmationCode() : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.resendConfirmationCode((err : Error, res : string) =>\n      {\n        if (res)\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : resendConfirmationCode -> resendConfirmationCode', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: MFA ------------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  /**\n   * Login 2nd step for users with MFA enabled\n   *\n   * @param mfaCode\n   * @param mfaType - Optional parameter (SOFTWARE_TOKEN_MFA / SMS_MFA)\n   */\n  public sendMFACode(mfaCode : string, mfaType : string = null) : Promise<CognitoServiceResponse>\n  {\n    // TODO: dynamic code\n    // SOFTWARE_TOKEN_MFA\n    // SMS_MFA\n    let cognitoUser = this.getCognitoUser();\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.sendMFACode(mfaCode,\n      {\n        onSuccess : (session : AWSCognito.CognitoUserSession) =>\n        {\n          this.setUsername(cognitoUser.getUsername());\n          this.updateTokens(session);\n          this.setProvider(AuthType.COGNITO);\n          this.updateCredentials();\n\n          this.onSignIn.emit();\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, session);\n          return resolve(response);\n        },\n        onFailure : (err : any) =>\n        {\n          console.error('CognitoService : sendMFACode -> sendMFACode', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        }\n      }, mfaType);\n    });\n  }\n\n  /**\n   * Return the user's MFA status\n   */\n  public getMFAOptions() : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.getMFAOptions((err : Error, res : AWSCognito.MFAOption[]) =>\n      {\n        if (res)\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : getMFAOptions -> getMFAOptions', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  /**\n   * Return the user's MFA status (must have a phone_number set)\n   *\n   * @param enableMfa\n   */\n  public setMfa(enableMfa : boolean) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      if (enableMfa)\n      {\n        cognitoUser.enableMFA((err : Error, res : string) =>\n        {\n          if (res)\n          {\n            let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n            return resolve(response);\n          }\n          console.error('CognitoService : setMfa -> enableMFA', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        });\n      }\n      else\n      {\n        cognitoUser.disableMFA((err : Error, res : string) =>\n        {\n          if (res)\n          {\n            let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n            return resolve(response);\n          }\n          console.error('CognitoService : setMfa -> disableMFA', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        });\n      }\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Password -------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  /**\n   * Set a new password on the first connection (if a new password is required)\n   *\n   * @param newPassword\n   * @param requiredAttributeData - Optional parameter\n   */\n  public newPasswordRequired(newPassword : string, requiredAttributeData : any = {}) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.completeNewPasswordChallenge(newPassword, requiredAttributeData,\n      {\n        onSuccess : (session : AWSCognito.CognitoUserSession) =>\n        {\n          this.updateTokens(session);\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, session);\n          return resolve(response);\n        },\n        onFailure : (err : any) =>\n        {\n          console.error('CognitoService : newPasswordRequired -> completeNewPasswordChallenge', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        },\n        mfaRequired : (challengeName : any, challengeParameters : any) =>\n        {\n          let response = new CognitoServiceResponse(RespType.MFA_REQUIRED, { challengeName : challengeName, challengeParameters : challengeParameters });\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Initiate forgot password flow\n   *\n   * @param username\n   */\n  public forgotPassword(username : string) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.setCognitoUser(username);\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.forgotPassword(\n      {\n        onSuccess : (data : any) =>\n        {\n          // NOTE: onSuccess is called if there is no inputVerificationCode callback\n          // NOTE: https://github.com/amazon-archives/amazon-cognito-identity-js/issues/324\n          // NOTE: https://github.com/amazon-archives/amazon-cognito-identity-js/issues/323\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, data);\n          return resolve(response);\n        },\n        onFailure : (err : Error) =>\n        {\n          console.error('CognitoService : forgotPassword -> forgotPassword', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        },\n        inputVerificationCode : (data : any) =>\n        {\n          let response = new CognitoServiceResponse(RespType.INPUT_VERIFICATION_CODE, data);\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Resend the forgotPassword verification code\n   */\n  public getAttributeVerificationCode() : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      let name : string = null;\n      cognitoUser.getAttributeVerificationCode(name,\n      {\n        onSuccess : () =>\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, null);\n          return resolve(response);\n        },\n        onFailure : (err : Error) =>\n        {\n          console.error('CognitoService : getAttributeVerificationCode -> getAttributeVerificationCode', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        },\n        inputVerificationCode : (data : string) =>\n        {\n          let response = new CognitoServiceResponse(RespType.INPUT_VERIFICATION_CODE, data);\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Finish forgot password flow\n   *\n   * @param newPassword\n   * @param verificationCode\n   */\n  public confirmPassword(newPassword : string, verificationCode : string) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.confirmPassword(verificationCode, newPassword,\n      {\n        onSuccess()\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, null);\n          return resolve(response);\n        },\n        onFailure : (err : Error) =>\n        {\n          console.error('CognitoService : confirmPassword -> confirmPassword', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Update a user's password\n   *\n   * @param oldPassword\n   * @param newPassword\n   */\n  public changePassword(oldPassword : string, newPassword : string) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.changePassword(oldPassword, newPassword, (err : Error, res : string) =>\n      {\n        if (res)\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : changePassword -> changePassword', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Admin ----------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  public adminCreateUser(username : string, password : string) : Promise<AWS.AWSError | AWS.CognitoIdentityServiceProvider.AdminCreateUserResponse>\n  {\n    this.setAdmin();\n    let params : AWS.CognitoIdentityServiceProvider.AdminCreateUserRequest = {\n      UserPoolId        : this.poolData.UserPoolId,\n      Username          : username,\n      TemporaryPassword : password\n    };\n\n    let cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoIdentityServiceProvider.adminCreateUser(params, (err : AWS.AWSError, res : AWS.CognitoIdentityServiceProvider.AdminCreateUserResponse) =>\n      {\n        if (res)\n          return resolve(res);\n        console.error('CognitoService : adminCreateUser -> adminCreateUser', err);\n        return reject(err);\n      });\n    });\n  }\n\n  public adminDeleteUser(username : string) : Promise<AWS.AWSError | any>\n  {\n    this.setAdmin();\n    let params : AWS.CognitoIdentityServiceProvider.AdminDeleteUserRequest = {\n      UserPoolId : this.poolData.UserPoolId,\n      Username   : username\n    };\n\n    let cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoIdentityServiceProvider.adminDeleteUser(params, (err : AWS.AWSError, res : any) =>\n      {\n        if (res)\n          return resolve(res);\n        console.error('CognitoService : adminDeleteUser -> adminDeleteUser', err);\n        return reject(err);\n      });\n    });\n  }\n\n  public adminResetUserPassword(username : string) : Promise<AWS.AWSError | AWS.CognitoIdentityServiceProvider.AdminResetUserPasswordResponse>\n  {\n    this.setAdmin();\n    let params : AWS.CognitoIdentityServiceProvider.AdminResetUserPasswordRequest = {\n      UserPoolId : this.poolData.UserPoolId,\n      Username   : username\n    };\n\n    let cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoIdentityServiceProvider.adminResetUserPassword(params, (err : AWS.AWSError, res : AWS.CognitoIdentityServiceProvider.AdminResetUserPasswordResponse) =>\n      {\n        if (res)\n          return resolve(res);\n        console.error('CognitoService : adminResetUserPassword -> adminResetUserPassword', err);\n        return reject(err);\n      });\n    });\n  }\n\n  public adminUpdateUserAttributes(username : string, userAttributes : AWS.CognitoIdentityServiceProvider.Types.AttributeListType) : Promise<AWS.AWSError | AWS.CognitoIdentityServiceProvider.AdminUpdateUserAttributesResponse>\n  {\n    this.setAdmin();\n    let params : AWS.CognitoIdentityServiceProvider.AdminUpdateUserAttributesRequest = {\n      UserPoolId     : this.poolData.UserPoolId,\n      Username       : username,\n      UserAttributes : userAttributes\n    };\n\n    let cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoIdentityServiceProvider.adminUpdateUserAttributes(params, (err : AWS.AWSError, res : AWS.CognitoIdentityServiceProvider.AdminUpdateUserAttributesResponse) =>\n      {\n        if (res)\n          return resolve(res);\n        console.error('CognitoService : adminUpdateUserAttributes -> adminUpdateUserAttributes', err);\n        return reject(err);\n      });\n    });\n  }\n\n  public resetExpiredAccount(usernameKey : string, username : string) : Promise<AWS.AWSError | AWS.CognitoIdentityServiceProvider.AdminUpdateUserAttributesResponse>\n  {\n    let attributes : AWS.CognitoIdentityServiceProvider.AttributeType[] = [];\n    attributes.push({ Name : usernameKey, Value : username });\n    return this.adminUpdateUserAttributes(username, attributes);\n  }\n\n  public setAdmin() : void\n  {\n    let creds = new AWS.Credentials(this.adminAccessKeyId, this.adminSecretKeyId);\n    AWS.config.region      = this.region;\n    AWS.config.credentials = creds;\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Authentication -------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  /**\n   * Connect an existing user\n   *\n   * @param provider - Use the AuthType enum to send an authorized authentication provider\n   * @param username\n   * @param password\n   */\n  public signIn(provider : string, username ?: string, password ?: string) : Promise<CognitoServiceResponse>\n  {\n    switch (provider)\n    {\n      case AuthType.COGNITO :\n        return this.authenticateCognitoUser(username, password);\n      case AuthType.GOOGLE :\n        return this.callGoogle(GoogleAction.AUTHENTICATE);\n      default :\n        let error = 'Provider not recognized : use the AuthType enum to send an authorized authentication provider';\n        console.error(error);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, error);\n        return Promise.reject(response);\n    }\n  }\n\n  /**\n   * Refresh a user's session (retrieve refreshed tokens)\n   */\n  public refreshSession() : Promise<CognitoServiceResponse>\n  {\n    let provider : string = null;\n    provider = this.getProvider();\n\n    switch (provider)\n    {\n      case AuthType.COGNITO :\n        return this.refreshCognitoSession();\n      case AuthType.GOOGLE :\n        return this.callGoogle(GoogleAction.REFRESH);\n      default :\n        let error = 'Provider not recognized : the user must be logged in before updating the session';\n        console.error(error);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, error);\n        return Promise.reject(response);\n    }\n  }\n\n  public signOut() : void\n  {\n    let provider : string = null;\n    provider = this.getProvider();\n\n    switch (provider)\n    {\n      case AuthType.COGNITO :\n        this.signOutCognito();\n        break;\n      case AuthType.GOOGLE :\n        this.callGoogle(GoogleAction.LOGOUT);\n        break;\n      default :\n        console.error('Provider not recognized : the user must be logged in before logging out');\n        break;\n    }\n\n    this.onSignOut.emit();\n    this.clearStorage();\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Cognito --------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  private authenticateCognitoUser(username : string, password : string) : Promise<CognitoServiceResponse>\n  {\n    let authenticationData : AWSCognito.IAuthenticationDetailsData = {\n      Username : username,\n      Password : password\n    };\n    let authenticationDetails = new AWSCognito.AuthenticationDetails(authenticationData);\n    let cognitoUser = this.getCognitoUser(username);\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.authenticateUser(authenticationDetails,\n      {\n        newPasswordRequired : (userAttributes : any, requiredAttributes : any) =>\n        {\n          this.cognitoUser = cognitoUser; // NOTE: https://github.com/amazon-archives/amazon-cognito-identity-js/issues/365\n          let response = new CognitoServiceResponse(RespType.NEW_PASSWORD_REQUIRED, { userAttributes : userAttributes, requiredAttributes : requiredAttributes });\n          return resolve(response);\n        },\n        onSuccess : (session : AWSCognito.CognitoUserSession) =>\n        {\n          this.setUsername(username);\n          this.updateTokens(session);\n          this.setProvider(AuthType.COGNITO);\n          this.updateCredentials();\n\n          this.onSignIn.emit();\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, session);\n          return resolve(response);\n        },\n        onFailure : (err) =>\n        {\n          console.error('CognitoService : authenticateCognitoUser -> authenticateUser', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        },\n        mfaSetup : (challengeName : any, challengeParameters : any) =>\n        {\n          cognitoUser.associateSoftwareToken(\n          {\n            associateSecretCode : (secretCode : string) =>\n            {\n              let response = new CognitoServiceResponse(RespType.MFA_SETUP_ASSOCIATE_SECRETE_CODE, secretCode);\n              return resolve(response);\n            },\n            onFailure : (err) =>\n            {\n              let response = new CognitoServiceResponse(RespType.MFA_SETUP_ON_FAILURE, err);\n              return reject(response);\n            }\n          });\n        },\n        mfaRequired : (challengeName : any, challengeParameters : any) =>\n        {\n          let response = new CognitoServiceResponse(RespType.MFA_REQUIRED, { challengeName : challengeName, challengeParameters : challengeParameters });\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  private refreshCognitoSession() : Promise<CognitoServiceResponse>\n  {\n    let tokens       = this.getTokens();\n    let cognitoUser  = this.getCognitoUser();\n    let refreshToken = new AWSCognito.CognitoRefreshToken({ RefreshToken : tokens.refreshToken });\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.refreshSession(refreshToken, (err : any, res : any) =>\n      {\n        if (res)\n        {\n          this.updateTokens(res);\n          this.updateCredentials();\n\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : refreshSession -> refreshSession', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  private signOutCognito() : void\n  {\n    let cognitoUser = this.getCognitoUser();\n    if (cognitoUser)\n      cognitoUser.signOut();\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Google ---------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  private initGoogle() : Promise<CognitoServiceResponse>\n  {\n    let params  : gapi.auth2.ClientConfig = {\n      client_id : this.googleId,\n      scope     : this.googleScope\n    };\n\n    return new Promise((resolve, reject) =>\n    {\n      gapi.load('auth2',\n      {\n        callback  : _ =>\n        {\n          gapi.auth2.init(params).then((googleAuth : gapi.auth2.GoogleAuth) =>\n          {\n            this.googleAuth = googleAuth;\n            let response = new CognitoServiceResponse(RespType.ON_SUCCESS, googleAuth);\n            return resolve(response);\n          },\n          (reason : { error : string, details : string }) =>\n          {\n            console.error('CognitoService : initGoogle -> GoogleAuth', reason);\n            let response = new CognitoServiceResponse(RespType.ON_FAILURE, reason);\n            return reject(response);\n          });\n        },\n        onerror   : _ =>\n        { // Handle loading error\n          let error = 'gapi.client failed to load';\n          console.error('CognitoService : initGoogle -> load', error);\n          let response = new CognitoServiceResponse(RespType.ON_ERROR, error);\n          return reject(response);\n        },\n        timeout   : 5000, // 5 seconds\n        ontimeout : _ =>\n        { // Handle timeout\n          let error = 'gapi.client could not load in a timely manner';\n          console.error('CognitoService : initGoogle -> load', error);\n          let response = new CognitoServiceResponse(RespType.ON_TIMEOUT, error);\n          return reject(response);\n        }\n      });\n    });\n  }\n\n  private callGoogle(action : string) : Promise<CognitoServiceResponse>\n  {\n    if (this.googleAuth)\n    {\n      return this.makeGoogle(action);\n    }\n    else\n    {\n      return new Promise((resolve, reject) =>\n      {\n        this.initGoogle().then(_ =>\n        {\n          this.makeGoogle(action).then(res => resolve(res)).catch(err => reject(err));\n        }).catch(error =>\n        {\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, error);\n          return Promise.reject(response);\n        });\n      });\n    }\n  }\n\n  private makeGoogle(action : string) : Promise<CognitoServiceResponse>\n  {\n    switch (action)\n    {\n      case GoogleAction.AUTHENTICATE :\n        return this.authenticateGoogleUser();\n      case GoogleAction.REFRESH :\n        return this.refreshGoogleSession();\n      case GoogleAction.LOGOUT :\n        this.signOutGoogle();\n        let logoutResponse = new CognitoServiceResponse(RespType.ON_SUCCESS, null);\n        return Promise.resolve(logoutResponse);\n      default :\n        let error = 'Google action not recognized : authenticate / refresh / logout';\n        console.error(error);\n        let defaultResponse = new CognitoServiceResponse(RespType.ON_FAILURE, error);\n        return Promise.reject(defaultResponse);\n    }\n  }\n\n  private authenticateGoogleUser() : Promise<CognitoServiceResponse>\n  {\n    return new Promise((resolve, reject) =>\n    {\n      let options : gapi.auth2.SigninOptions = {\n        scope : this.googleScope\n      };\n      this.googleAuth.signIn(options).then((googleUser : gapi.auth2.GoogleUser) =>\n      {\n        let googleResponse = googleUser.getAuthResponse();\n        let googleProfile  = googleUser.getBasicProfile();\n\n        this.setUsername(googleProfile.getName());\n        this.setIdToken(googleResponse.id_token);\n        this.setExpiresAt(googleResponse.expires_at);\n        this.setProvider(AuthType.GOOGLE);\n        this.updateCredentials();\n\n        this.onSignIn.emit();\n        let response = new CognitoServiceResponse(RespType.ON_SUCCESS, googleProfile);\n        return resolve(response);\n      }, (onRejected : any) =>\n      {\n        // Can be : popup_blocked_by_browser\n        console.error('CognitoService : authenticateGoogleUser -> signIn', onRejected);\n        let response = new CognitoServiceResponse(RespType.ON_REJECTED, onRejected);\n        return reject(response);\n      }).catch((err) =>\n      {\n        console.error('CognitoService : authenticateGoogleUser -> signIn', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  private refreshGoogleSession() : Promise<CognitoServiceResponse>\n  {\n    let googleUser : gapi.auth2.GoogleUser = null;\n    googleUser = this.googleAuth.currentUser.get();\n\n    return new Promise((resolve, reject) =>\n    {\n      googleUser.reloadAuthResponse().then((res : gapi.auth2.AuthResponse) =>\n      {\n        this.setIdToken(res.id_token);\n        this.setExpiresAt(res.expires_at);\n        this.updateCredentials();\n\n        let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n        return resolve(response);\n      }).catch(err =>\n      {\n        console.error('CognitoService : refreshGoogleSession -> reloadAuthResponse', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  private signOutGoogle() : void\n  {\n    this.googleAuth.signOut().then(_ =>\n    {\n      this.googleAuth.disconnect();\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // TODO: Facebook ----------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Private helpers ------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  // NOTE: User --------------------------------------------------------------------------------\n\n  private setCognitoUser(username : string) : AWSCognito.CognitoUser\n  {\n    let cognitoUser : AWSCognito.CognitoUser = null;\n    let cognitoUserPool = new AWSCognito.CognitoUserPool(this.poolData);\n\n    let userData : AWSCognito.ICognitoUserData = {\n      Username   : username,\n      Pool       : cognitoUserPool\n    };\n    cognitoUser = new AWSCognito.CognitoUser(userData);\n\n    this.cognitoUser = cognitoUser; // Store the user in the service\n    this.setUsername(username); // Store the username in the local storage\n\n    return cognitoUser;\n  }\n\n  // NOTE: Session -----------------------------------------------------------------------------\n\n  private setExpiresAt(expiresAt : number) : void\n  {\n    let storageKey : string = null;\n    storageKey = this.storagePrefix + 'ExpiresAt';\n    localStorage.setItem(storageKey, expiresAt.toString());\n  }\n\n  // NOTE: Username ----------------------------------------------------------------------------\n\n  private setUsername(username : string) : void\n  {\n    let storageKey : string = null;\n    storageKey = this.storagePrefix + 'Username';\n    localStorage.setItem(storageKey, username);\n  }\n\n  // NOTE: Provider ----------------------------------------------------------------------------\n\n  private setProvider(provider : string) : void\n  {\n    let storageKey : string = null;\n    storageKey = this.storagePrefix + 'Provider';\n    localStorage.setItem(storageKey, provider);\n  }\n\n  // NOTE: Token -------------------------------------------------------------------------------\n\n  private setIdToken(token : string) : void\n  {\n    let storageKey : string = null;\n    storageKey = this.storagePrefix + 'IdToken';\n    localStorage.setItem(storageKey, token);\n  }\n\n  private setTokens(session : AWSCognito.CognitoUserSession) : void\n  {\n    let storageKey : string = null;\n    let tokensStr  : string = null;\n    let tokensObj  : any    = null;\n\n    storageKey = this.storagePrefix + 'SessionTokens';\n    tokensObj  = {\n      accessToken          : session.getAccessToken().getJwtToken(),\n      accessTokenExpiresAt : session.getAccessToken().getExpiration() * 1000, // Seconds to milliseconds\n      idToken              : session.getIdToken().getJwtToken(),\n      idTokenExpiresAt     : session.getIdToken().getExpiration() * 1000, // Seconds to milliseconds\n      refreshToken         : session.getRefreshToken().getToken()\n    };\n    tokensStr = JSON.stringify(tokensObj);\n    localStorage.setItem(storageKey, tokensStr);\n  }\n\n  private updateTokens(session : AWSCognito.CognitoUserSession) : void\n  {\n    let tokens : any = null;\n    this.setTokens(session);\n    tokens = this.getTokens();\n    this.setIdToken(tokens.idToken);\n    this.setExpiresAt(tokens.idTokenExpiresAt);\n  }\n\n  // NOTE: Storage -----------------------------------------------------------------------------\n\n  private clearStorage() : void\n  {\n    localStorage.removeItem(this.storagePrefix + 'Username');\n    localStorage.removeItem(this.storagePrefix + 'Provider');\n    localStorage.removeItem(this.storagePrefix + 'IdToken');\n    localStorage.removeItem(this.storagePrefix + 'ExpiresAt');\n    localStorage.removeItem(this.storagePrefix + 'SessionTokens');\n  }\n\n  // !SECTION\n\n}\n"]}