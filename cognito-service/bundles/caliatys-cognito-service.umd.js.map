{"version":3,"file":"caliatys-cognito-service.umd.js.map","sources":["ng://@caliatys/cognito-service/lib/models/cognito-service-response.model.ts","ng://@caliatys/cognito-service/lib/enums/auth-type.enum.ts","ng://@caliatys/cognito-service/lib/enums/resp-type.enum.ts","ng://@caliatys/cognito-service/lib/cognito.service.ts"],"sourcesContent":["export class CognitoServiceResponse\n{\n  public type : string;\n  public data : any;\n\n  constructor(type : string, data : any)\n  {\n    this.type = type;\n    this.data = data;\n  }\n}","export enum AuthType\n{\n  COGNITO  = 'cognito',\n  GOOGLE   = 'google',\n  FACEBOOK = 'facebook'\n}\n","export enum RespType\n{\n  ON_SUCCESS                       = 'onSuccess',\n  ON_FAILURE                       = 'onFailure',\n  ON_ERROR                         = 'onError',\n  ON_TIMEOUT                       = 'onTimeout',\n  ON_REJECTED                      = 'onRejected',\n  NEW_PASSWORD_REQUIRED            = 'newPasswordRequired',\n  INPUT_VERIFICATION_CODE          = 'inputVerificationCode',\n  MFA_REQUIRED                     = 'mfaRequired',\n  MFA_SETUP_ASSOCIATE_SECRETE_CODE = 'mfaSetup associateSecretCode',\n  MFA_SETUP_ON_FAILURE             = 'mfaSetup onFailure',\n  EXPIRED_TOKEN                    = 'expiredToken'\n}\n","// Angular modules\nimport { Injectable }             from '@angular/core';\nimport { Inject }                 from '@angular/core';\nimport { Optional }               from '@angular/core';\nimport { EventEmitter }           from '@angular/core';\n\n// External modules\nimport * as AWSCognito            from 'amazon-cognito-identity-js';\nimport * as AWS                   from 'aws-sdk';\nimport * as awsservice            from 'aws-sdk/lib/service';\n\n// Models\nimport { CognitoServiceResponse } from './models/cognito-service-response.model';\n\n// Enums\nimport { AuthType }               from './enums/auth-type.enum';\nimport { RespType }               from './enums/resp-type.enum';\n\nexport enum GoogleAction\n{\n  AUTHENTICATE = 'authenticate',\n  REFRESH      = 'refresh',\n  LOGOUT       = 'logout'\n}\n\n@Injectable({\n  providedIn : 'root'\n})\nexport class CognitoService\n{\n  public  onSignIn          : EventEmitter<null>;\n  public  onSignOut         : EventEmitter<null>;\n\n  // private MFA              : boolean = false;\n\n  private storagePrefix    : string;\n\n  private googleId         : string;\n  private googleScope      : string;\n\n  private poolData : AWSCognito.ICognitoUserPoolData = {\n    UserPoolId : null, // CognitoUserPool\n    ClientId   : null  // CognitoUserPoolClient\n  };\n\n  private identityPool     : string; // CognitoIdentityPool\n  private region           : string; // Region Matching CognitoUserPool region\n\n  private adminAccessKeyId : string;\n  private adminSecretKeyId : string;\n\n  private googleAuth       : gapi.auth2.GoogleAuth;\n  private cognitoUser      : AWSCognito.CognitoUser;\n\n  constructor\n  (\n    @Inject('cognitoConst') @Optional() public cognitoConst : any\n  )\n  {\n    this.onSignIn             = new EventEmitter();\n    this.onSignOut            = new EventEmitter();\n\n    this.storagePrefix       = cognitoConst.storagePrefix + '_CognitoService_';\n\n    this.googleId            = cognitoConst.googleId;\n    this.googleScope         = cognitoConst.googleScope;\n\n    this.poolData.UserPoolId = cognitoConst.poolData.UserPoolId;\n    this.poolData.ClientId   = cognitoConst.poolData.ClientId;\n\n    this.identityPool        = cognitoConst.identityPool;\n\n    this.region              = cognitoConst.region;\n    this.adminAccessKeyId    = cognitoConst.adminAccessKeyId;\n    this.adminSecretKeyId    = cognitoConst.adminSecretKeyId;\n  }\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Helpers --------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  // NOTE: Misc --------------------------------------------------------------------------------\n\n  public isAuthenticated() : boolean\n  {\n    if (this.getRemaining())\n      return true;\n    return false;\n  }\n\n  public sts() : Promise<AWS.STS.GetCallerIdentityResponse | AWS.AWSError>\n  {\n    return new Promise((resolve, reject) =>\n    {\n      let sts = new AWS.STS();\n      let params : AWS.STS.GetCallerIdentityRequest = null;\n      sts.getCallerIdentity(params, (err : AWS.AWSError, data : AWS.STS.GetCallerIdentityResponse) =>\n      {\n        if (data)\n          return resolve(data);\n        console.error('CognitoService : sts -> getCallerIdentity', err);\n        return reject(err);\n      });\n    });\n  }\n\n  // NOTE: Session -----------------------------------------------------------------------------\n\n  public autoRefreshSession() : void\n  {\n    let expiresAt = this.getExpiresAt();\n    if (!expiresAt)\n      return;\n\n    let timeDiff = expiresAt.getTime() - Date.now() - 60000; // 1 min\n\n    if (timeDiff < 0)\n    {\n      this.signOut();\n      return;\n    }\n\n    setTimeout(() =>\n    {\n      // Refresh token\n      this.refreshSession().then(_ =>\n      {\n        this.autoRefreshSession();\n      }).catch(_ =>\n      {\n        this.signOut();\n      });\n    }, timeDiff);\n  }\n\n  public getRemaining() : number\n  {\n    let remaining : number = 0;\n    let now       : number = 0;\n    let max       : Date   = null;\n    now = Date.now();\n    max = this.getExpiresAt();\n\n    if (!max)\n      return null;\n    remaining = max.getTime() - now;\n    if (remaining <= 0)\n      return null;\n    return remaining;\n  }\n\n  public getExpiresAt() : Date\n  {\n    let storageKey   : string = null;\n    let expiresAtStr : string = null;\n    let expiresAtNum : number = null;\n    let expiresAtDat : Date   = null;\n    storageKey   = this.storagePrefix + 'ExpiresAt';\n    expiresAtStr = localStorage.getItem(storageKey);\n    if (expiresAtStr)\n    {\n      expiresAtNum = Number(expiresAtStr);\n      if (expiresAtNum)\n        expiresAtDat = new Date(expiresAtNum);\n    }\n    return expiresAtDat;\n  }\n\n  // NOTE: Username ----------------------------------------------------------------------------\n\n  public getUsername() : string\n  {\n    let storageKey : string = null;\n    let provider   : string = null;\n    storageKey = this.storagePrefix + 'Username';\n    provider   = localStorage.getItem(storageKey);\n    return provider;\n  }\n\n  // NOTE: Provider ----------------------------------------------------------------------------\n\n  public getProvider() : string\n  {\n    let storageKey : string = null;\n    let provider   : string = null;\n    storageKey = this.storagePrefix + 'Provider';\n    provider   = localStorage.getItem(storageKey);\n    return provider;\n  }\n\n  // NOTE: Token -------------------------------------------------------------------------------\n\n  public getIdToken() : string\n  {\n    let storageKey : string = null;\n    let idToken    : string = null;\n    storageKey = this.storagePrefix + 'IdToken';\n    idToken    = localStorage.getItem(storageKey);\n    return idToken;\n  }\n\n  public getTokens() : any\n  {\n    let storageKey : string = null;\n    let tokensStr  : string = null;\n    let tokensObj  : any    = null;\n    storageKey = this.storagePrefix + 'SessionTokens';\n    tokensStr  = localStorage.getItem(storageKey);\n    tokensObj  = JSON.parse(tokensStr);\n    return tokensObj;\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Credentials ----------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  public initCredentials() : void\n  {\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId : this.identityPool,\n    });\n    AWS.config.region = this.region;\n  }\n\n  public getCredentials() : Promise<any>\n  {\n    return new Promise((resolve, reject) =>\n    {\n      let credentials = AWS.config.credentials as any;\n      if (!credentials)\n      {\n        let error = 'You must initialize the credentials with initCredentials()';\n        console.error('CognitoService : getCredentials', error);\n        return reject(error);\n      }\n      credentials.get((err) =>\n      {\n        if (err)\n        {\n          console.error('CognitoService : getCredentials', err);\n          return reject(err);\n        }\n        return resolve(AWS.config.credentials);\n      });\n    });\n  }\n\n  public updateCredentials(clientConfig ?: awsservice.ServiceConfigurationOptions) : void\n  {\n    let url      : string = null;\n    let provider : string = null;\n    let idToken  : string = null;\n\n    provider = this.getProvider();\n    idToken  = this.getIdToken();\n\n    switch (provider)\n    {\n      case AuthType.COGNITO :\n        url = 'cognito-idp.' + this.region.toLowerCase() + '.amazonaws.com/' + this.poolData.UserPoolId;\n        break;\n      case AuthType.GOOGLE :\n        url = 'accounts.google.com';\n        break;\n      default :\n        console.error('CognitoService : setCredentials -> Provider not recognized');\n        return;\n    }\n\n    let logins : any = {};\n    logins[url] = idToken;\n\n    if (!this.identityPool)\n    {\n      console.info('We recommend that you provide an identity pool ID from a federated identity');\n      return;\n    }\n\n    let options : AWS.CognitoIdentityCredentials.CognitoIdentityOptions = {\n      IdentityPoolId : this.identityPool,\n      Logins         : logins\n    };\n\n    AWS.config.region      = this.region;\n    AWS.config.credentials = new AWS.CognitoIdentityCredentials(options, clientConfig);\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: User -----------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  public getCognitoUser(username : string = null) : AWSCognito.CognitoUser\n  {\n    if (this.cognitoUser)\n      return this.cognitoUser; // User stored in the service\n\n    let cognitoUser : AWSCognito.CognitoUser = null;\n    let cognitoUserPool = new AWSCognito.CognitoUserPool(this.poolData);\n\n    cognitoUser = cognitoUserPool.getCurrentUser(); // Authenticated user\n\n    if (!cognitoUser)\n    {\n      let name : string = null;\n      if (username)\n        name = username; // User sent\n      else\n        name = this.getUsername(); // User stored in local storage\n      cognitoUser = this.setCognitoUser(name);\n    }\n\n    return cognitoUser;\n  }\n\n  public getUserAttributes() : any\n  {\n    let cognitoUser = this.getCognitoUser();\n    cognitoUser.getUserAttributes((err : Error, res : AWSCognito.CognitoUserAttribute[]) =>\n    {\n      if (res)\n        return res;\n      console.error('CognitoService : getUserAttributes -> getUserAttributes', err);\n    });\n  }\n\n  public deleteAttributes(attributeList : string[]) : any\n  {\n    let cognitoUser = this.getCognitoUser();\n    cognitoUser.deleteAttributes(attributeList, (err : Error, res : string) =>\n    {\n      if (res)\n        return res;\n      console.error('CognitoService : deleteAttributes -> deleteAttributes', err);\n    });\n  }\n\n  public getUserData() : any\n  {\n    let cognitoUser = this.getCognitoUser();\n    cognitoUser.getUserData((err : Error, res : AWSCognito.UserData) =>\n    {\n      if (res)\n        return res;\n      console.error('CognitoService : getUserData -> getUserData', err);\n    });\n  }\n\n  public deleteUser() : any\n  {\n    let cognitoUser = this.getCognitoUser();\n    cognitoUser.deleteUser((err : Error, res : string) =>\n    {\n      if (res)\n        return res;\n      console.error('CognitoService : deleteUser -> deleteUser', err);\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Registration ---------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  /**\n   * Register a new user\n   *\n   * @param username\n   * @param password\n   * @param userAttributes - Optional parameter\n   * @param validationData - Optional parameter\n   */\n  public signUp(username : string, password : string, userAttributes : AWSCognito.CognitoUserAttribute[] = [], validationData : AWSCognito.CognitoUserAttribute[] = []) : Promise<CognitoServiceResponse>\n  {\n    let userPool = new AWSCognito.CognitoUserPool(this.poolData);\n\n    return new Promise((resolve, reject) =>\n    {\n      userPool.signUp(username, password, userAttributes, validationData, (err : Error, res : AWSCognito.ISignUpResult) =>\n      {\n        if (res)\n        {\n          this.setUsername(username);\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : signUp -> signUp', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  /**\n   * Confirm the signUp action\n   *\n   * @param verificationCode\n   * @param forceAliasCreation - Optional parameter\n   */\n  public confirmRegistration(verificationCode : string, forceAliasCreation : boolean = false) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.confirmRegistration(verificationCode, forceAliasCreation, (err : any, res : any) =>\n      {\n        if (res)\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : confirmRegistration -> confirmRegistration', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  /**\n   * Resend the signUp confirmation code\n   */\n  public resendConfirmationCode() : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.resendConfirmationCode((err : Error, res : string) =>\n      {\n        if (res)\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : resendConfirmationCode -> resendConfirmationCode', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: MFA ------------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  /**\n   * Login 2nd step for users with MFA enabled\n   *\n   * @param mfaCode\n   * @param mfaType - Optional parameter (SOFTWARE_TOKEN_MFA / SMS_MFA)\n   */\n  public sendMFACode(mfaCode : string, mfaType : string = null) : Promise<CognitoServiceResponse>\n  {\n    // TODO: dynamic code\n    // SOFTWARE_TOKEN_MFA\n    // SMS_MFA\n    let cognitoUser = this.getCognitoUser();\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.sendMFACode(mfaCode,\n      {\n        onSuccess : (session : AWSCognito.CognitoUserSession) =>\n        {\n          this.setUsername(cognitoUser.getUsername());\n          this.updateTokens(session);\n          this.setProvider(AuthType.COGNITO);\n          this.updateCredentials();\n\n          this.onSignIn.emit();\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, session);\n          return resolve(response);\n        },\n        onFailure : (err : any) =>\n        {\n          console.error('CognitoService : sendMFACode -> sendMFACode', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        }\n      }, mfaType);\n    });\n  }\n\n  /**\n   * Return the user's MFA status\n   */\n  public getMFAOptions() : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.getMFAOptions((err : Error, res : AWSCognito.MFAOption[]) =>\n      {\n        if (res)\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : getMFAOptions -> getMFAOptions', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  /**\n   * Return the user's MFA status (must have a phone_number set)\n   *\n   * @param enableMfa\n   */\n  public setMfa(enableMfa : boolean) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      if (enableMfa)\n      {\n        cognitoUser.enableMFA((err : Error, res : string) =>\n        {\n          if (res)\n          {\n            let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n            return resolve(response);\n          }\n          console.error('CognitoService : setMfa -> enableMFA', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        });\n      }\n      else\n      {\n        cognitoUser.disableMFA((err : Error, res : string) =>\n        {\n          if (res)\n          {\n            let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n            return resolve(response);\n          }\n          console.error('CognitoService : setMfa -> disableMFA', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        });\n      }\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Password -------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  /**\n   * Set a new password on the first connection (if a new password is required)\n   *\n   * @param newPassword\n   * @param requiredAttributeData - Optional parameter\n   */\n  public newPasswordRequired(newPassword : string, requiredAttributeData : any = {}) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.completeNewPasswordChallenge(newPassword, requiredAttributeData,\n      {\n        onSuccess : (session : AWSCognito.CognitoUserSession) =>\n        {\n          this.updateTokens(session);\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, session);\n          return resolve(response);\n        },\n        onFailure : (err : any) =>\n        {\n          console.error('CognitoService : newPasswordRequired -> completeNewPasswordChallenge', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        },\n        mfaRequired : (challengeName : any, challengeParameters : any) =>\n        {\n          let response = new CognitoServiceResponse(RespType.MFA_REQUIRED, { challengeName : challengeName, challengeParameters : challengeParameters });\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Initiate forgot password flow\n   *\n   * @param username\n   */\n  public forgotPassword(username : string) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.setCognitoUser(username);\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.forgotPassword(\n      {\n        onSuccess : (data : any) =>\n        {\n          // NOTE: onSuccess is called if there is no inputVerificationCode callback\n          // NOTE: https://github.com/amazon-archives/amazon-cognito-identity-js/issues/324\n          // NOTE: https://github.com/amazon-archives/amazon-cognito-identity-js/issues/323\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, data);\n          return resolve(response);\n        },\n        onFailure : (err : Error) =>\n        {\n          console.error('CognitoService : forgotPassword -> forgotPassword', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        },\n        inputVerificationCode : (data : any) =>\n        {\n          let response = new CognitoServiceResponse(RespType.INPUT_VERIFICATION_CODE, data);\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Resend the forgotPassword verification code\n   */\n  public getAttributeVerificationCode() : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      let name : string = null;\n      cognitoUser.getAttributeVerificationCode(name,\n      {\n        onSuccess : () =>\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, null);\n          return resolve(response);\n        },\n        onFailure : (err : Error) =>\n        {\n          console.error('CognitoService : getAttributeVerificationCode -> getAttributeVerificationCode', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        },\n        inputVerificationCode : (data : string) =>\n        {\n          let response = new CognitoServiceResponse(RespType.INPUT_VERIFICATION_CODE, data);\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Finish forgot password flow\n   *\n   * @param newPassword\n   * @param verificationCode\n   */\n  public confirmPassword(newPassword : string, verificationCode : string) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.confirmPassword(verificationCode, newPassword,\n      {\n        onSuccess()\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, null);\n          return resolve(response);\n        },\n        onFailure : (err : Error) =>\n        {\n          console.error('CognitoService : confirmPassword -> confirmPassword', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        }\n      });\n    });\n  }\n\n  /**\n   * Update a user's password\n   *\n   * @param oldPassword\n   * @param newPassword\n   */\n  public changePassword(oldPassword : string, newPassword : string) : Promise<CognitoServiceResponse>\n  {\n    let cognitoUser = this.getCognitoUser();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.changePassword(oldPassword, newPassword, (err : Error, res : string) =>\n      {\n        if (res)\n        {\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : changePassword -> changePassword', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Admin ----------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  public adminCreateUser(username : string, password : string) : Promise<AWS.AWSError | AWS.CognitoIdentityServiceProvider.AdminCreateUserResponse>\n  {\n    this.setAdmin();\n    let params : AWS.CognitoIdentityServiceProvider.AdminCreateUserRequest = {\n      UserPoolId        : this.poolData.UserPoolId,\n      Username          : username,\n      TemporaryPassword : password\n    };\n\n    let cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoIdentityServiceProvider.adminCreateUser(params, (err : AWS.AWSError, res : AWS.CognitoIdentityServiceProvider.AdminCreateUserResponse) =>\n      {\n        if (res)\n          return resolve(res);\n        console.error('CognitoService : adminCreateUser -> adminCreateUser', err);\n        return reject(err);\n      });\n    });\n  }\n\n  public adminDeleteUser(username : string) : Promise<AWS.AWSError | any>\n  {\n    this.setAdmin();\n    let params : AWS.CognitoIdentityServiceProvider.AdminDeleteUserRequest = {\n      UserPoolId : this.poolData.UserPoolId,\n      Username   : username\n    };\n\n    let cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoIdentityServiceProvider.adminDeleteUser(params, (err : AWS.AWSError, res : any) =>\n      {\n        if (res)\n          return resolve(res);\n        console.error('CognitoService : adminDeleteUser -> adminDeleteUser', err);\n        return reject(err);\n      });\n    });\n  }\n\n  public adminResetUserPassword(username : string) : Promise<AWS.AWSError | AWS.CognitoIdentityServiceProvider.AdminResetUserPasswordResponse>\n  {\n    this.setAdmin();\n    let params : AWS.CognitoIdentityServiceProvider.AdminResetUserPasswordRequest = {\n      UserPoolId : this.poolData.UserPoolId,\n      Username   : username\n    };\n\n    let cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoIdentityServiceProvider.adminResetUserPassword(params, (err : AWS.AWSError, res : AWS.CognitoIdentityServiceProvider.AdminResetUserPasswordResponse) =>\n      {\n        if (res)\n          return resolve(res);\n        console.error('CognitoService : adminResetUserPassword -> adminResetUserPassword', err);\n        return reject(err);\n      });\n    });\n  }\n\n  public adminUpdateUserAttributes(username : string, userAttributes : AWS.CognitoIdentityServiceProvider.Types.AttributeListType) : Promise<AWS.AWSError | AWS.CognitoIdentityServiceProvider.AdminUpdateUserAttributesResponse>\n  {\n    this.setAdmin();\n    let params : AWS.CognitoIdentityServiceProvider.AdminUpdateUserAttributesRequest = {\n      UserPoolId     : this.poolData.UserPoolId,\n      Username       : username,\n      UserAttributes : userAttributes\n    };\n\n    let cognitoIdentityServiceProvider = new AWS.CognitoIdentityServiceProvider();\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoIdentityServiceProvider.adminUpdateUserAttributes(params, (err : AWS.AWSError, res : AWS.CognitoIdentityServiceProvider.AdminUpdateUserAttributesResponse) =>\n      {\n        if (res)\n          return resolve(res);\n        console.error('CognitoService : adminUpdateUserAttributes -> adminUpdateUserAttributes', err);\n        return reject(err);\n      });\n    });\n  }\n\n  public resetExpiredAccount(usernameKey : string, username : string) : Promise<AWS.AWSError | AWS.CognitoIdentityServiceProvider.AdminUpdateUserAttributesResponse>\n  {\n    let attributes : AWS.CognitoIdentityServiceProvider.AttributeType[] = [];\n    attributes.push({ Name : usernameKey, Value : username });\n    return this.adminUpdateUserAttributes(username, attributes);\n  }\n\n  public setAdmin() : void\n  {\n    let creds = new AWS.Credentials(this.adminAccessKeyId, this.adminSecretKeyId);\n    AWS.config.region      = this.region;\n    AWS.config.credentials = creds;\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Authentication -------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  /**\n   * Connect an existing user\n   *\n   * @param provider - Use the AuthType enum to send an authorized authentication provider\n   * @param username\n   * @param password\n   */\n  public signIn(provider : string, username ?: string, password ?: string) : Promise<CognitoServiceResponse>\n  {\n    switch (provider)\n    {\n      case AuthType.COGNITO :\n        return this.authenticateCognitoUser(username, password);\n      case AuthType.GOOGLE :\n        return this.callGoogle(GoogleAction.AUTHENTICATE);\n      default :\n        let error = 'Provider not recognized : use the AuthType enum to send an authorized authentication provider';\n        console.error(error);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, error);\n        return Promise.reject(response);\n    }\n  }\n\n  /**\n   * Refresh a user's session (retrieve refreshed tokens)\n   */\n  public refreshSession() : Promise<CognitoServiceResponse>\n  {\n    let provider : string = null;\n    provider = this.getProvider();\n\n    switch (provider)\n    {\n      case AuthType.COGNITO :\n        return this.refreshCognitoSession();\n      case AuthType.GOOGLE :\n        return this.callGoogle(GoogleAction.REFRESH);\n      default :\n        let error = 'Provider not recognized : the user must be logged in before updating the session';\n        console.error(error);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, error);\n        return Promise.reject(response);\n    }\n  }\n\n  public signOut() : void\n  {\n    let provider : string = null;\n    provider = this.getProvider();\n\n    switch (provider)\n    {\n      case AuthType.COGNITO :\n        this.signOutCognito();\n        break;\n      case AuthType.GOOGLE :\n        this.callGoogle(GoogleAction.LOGOUT);\n        break;\n      default :\n        console.error('Provider not recognized : the user must be logged in before logging out');\n        break;\n    }\n\n    this.onSignOut.emit();\n    this.clearStorage();\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Cognito --------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  private authenticateCognitoUser(username : string, password : string) : Promise<CognitoServiceResponse>\n  {\n    let authenticationData : AWSCognito.IAuthenticationDetailsData = {\n      Username : username,\n      Password : password\n    };\n    let authenticationDetails = new AWSCognito.AuthenticationDetails(authenticationData);\n    let cognitoUser = this.getCognitoUser(username);\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.authenticateUser(authenticationDetails,\n      {\n        newPasswordRequired : (userAttributes : any, requiredAttributes : any) =>\n        {\n          this.cognitoUser = cognitoUser; // NOTE: https://github.com/amazon-archives/amazon-cognito-identity-js/issues/365\n          let response = new CognitoServiceResponse(RespType.NEW_PASSWORD_REQUIRED, { userAttributes : userAttributes, requiredAttributes : requiredAttributes });\n          return resolve(response);\n        },\n        onSuccess : (session : AWSCognito.CognitoUserSession) =>\n        {\n          this.setUsername(username);\n          this.updateTokens(session);\n          this.setProvider(AuthType.COGNITO);\n          this.updateCredentials();\n\n          this.onSignIn.emit();\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, session);\n          return resolve(response);\n        },\n        onFailure : (err) =>\n        {\n          console.error('CognitoService : authenticateCognitoUser -> authenticateUser', err);\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n          return reject(response);\n        },\n        mfaSetup : (challengeName : any, challengeParameters : any) =>\n        {\n          cognitoUser.associateSoftwareToken(\n          {\n            associateSecretCode : (secretCode : string) =>\n            {\n              let response = new CognitoServiceResponse(RespType.MFA_SETUP_ASSOCIATE_SECRETE_CODE, secretCode);\n              return resolve(response);\n            },\n            onFailure : (err) =>\n            {\n              let response = new CognitoServiceResponse(RespType.MFA_SETUP_ON_FAILURE, err);\n              return reject(response);\n            }\n          });\n        },\n        mfaRequired : (challengeName : any, challengeParameters : any) =>\n        {\n          let response = new CognitoServiceResponse(RespType.MFA_REQUIRED, { challengeName : challengeName, challengeParameters : challengeParameters });\n          return resolve(response);\n        }\n      });\n    });\n  }\n\n  private refreshCognitoSession() : Promise<CognitoServiceResponse>\n  {\n    let tokens       = this.getTokens();\n    let cognitoUser  = this.getCognitoUser();\n    let refreshToken = new AWSCognito.CognitoRefreshToken({ RefreshToken : tokens.refreshToken });\n\n    return new Promise((resolve, reject) =>\n    {\n      cognitoUser.refreshSession(refreshToken, (err : any, res : any) =>\n      {\n        if (res)\n        {\n          this.updateTokens(res);\n          this.updateCredentials();\n\n          let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n          return resolve(response);\n        }\n        console.error('CognitoService : refreshSession -> refreshSession', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  private signOutCognito() : void\n  {\n    let cognitoUser = this.getCognitoUser();\n    if (cognitoUser)\n      cognitoUser.signOut();\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Google ---------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  private initGoogle() : Promise<CognitoServiceResponse>\n  {\n    let params  : gapi.auth2.ClientConfig = {\n      client_id : this.googleId,\n      scope     : this.googleScope\n    };\n\n    return new Promise((resolve, reject) =>\n    {\n      gapi.load('auth2',\n      {\n        callback  : _ =>\n        {\n          gapi.auth2.init(params).then((googleAuth : gapi.auth2.GoogleAuth) =>\n          {\n            this.googleAuth = googleAuth;\n            let response = new CognitoServiceResponse(RespType.ON_SUCCESS, googleAuth);\n            return resolve(response);\n          },\n          (reason : { error : string, details : string }) =>\n          {\n            console.error('CognitoService : initGoogle -> GoogleAuth', reason);\n            let response = new CognitoServiceResponse(RespType.ON_FAILURE, reason);\n            return reject(response);\n          });\n        },\n        onerror   : _ =>\n        { // Handle loading error\n          let error = 'gapi.client failed to load';\n          console.error('CognitoService : initGoogle -> load', error);\n          let response = new CognitoServiceResponse(RespType.ON_ERROR, error);\n          return reject(response);\n        },\n        timeout   : 5000, // 5 seconds\n        ontimeout : _ =>\n        { // Handle timeout\n          let error = 'gapi.client could not load in a timely manner';\n          console.error('CognitoService : initGoogle -> load', error);\n          let response = new CognitoServiceResponse(RespType.ON_TIMEOUT, error);\n          return reject(response);\n        }\n      });\n    });\n  }\n\n  private callGoogle(action : string) : Promise<CognitoServiceResponse>\n  {\n    if (this.googleAuth)\n    {\n      return this.makeGoogle(action);\n    }\n    else\n    {\n      return new Promise((resolve, reject) =>\n      {\n        this.initGoogle().then(_ =>\n        {\n          this.makeGoogle(action).then(res => resolve(res)).catch(err => reject(err));\n        }).catch(error =>\n        {\n          let response = new CognitoServiceResponse(RespType.ON_FAILURE, error);\n          return Promise.reject(response);\n        });\n      });\n    }\n  }\n\n  private makeGoogle(action : string) : Promise<CognitoServiceResponse>\n  {\n    switch (action)\n    {\n      case GoogleAction.AUTHENTICATE :\n        return this.authenticateGoogleUser();\n      case GoogleAction.REFRESH :\n        return this.refreshGoogleSession();\n      case GoogleAction.LOGOUT :\n        this.signOutGoogle();\n        let logoutResponse = new CognitoServiceResponse(RespType.ON_SUCCESS, null);\n        return Promise.resolve(logoutResponse);\n      default :\n        let error = 'Google action not recognized : authenticate / refresh / logout';\n        console.error(error);\n        let defaultResponse = new CognitoServiceResponse(RespType.ON_FAILURE, error);\n        return Promise.reject(defaultResponse);\n    }\n  }\n\n  private authenticateGoogleUser() : Promise<CognitoServiceResponse>\n  {\n    return new Promise((resolve, reject) =>\n    {\n      let options : gapi.auth2.SigninOptions = {\n        scope : this.googleScope\n      };\n      this.googleAuth.signIn(options).then((googleUser : gapi.auth2.GoogleUser) =>\n      {\n        let googleResponse = googleUser.getAuthResponse();\n        let googleProfile  = googleUser.getBasicProfile();\n\n        this.setUsername(googleProfile.getName());\n        this.setIdToken(googleResponse.id_token);\n        this.setExpiresAt(googleResponse.expires_at);\n        this.setProvider(AuthType.GOOGLE);\n        this.updateCredentials();\n\n        this.onSignIn.emit();\n        let response = new CognitoServiceResponse(RespType.ON_SUCCESS, googleProfile);\n        return resolve(response);\n      }, (onRejected : any) =>\n      {\n        // Can be : popup_blocked_by_browser\n        console.error('CognitoService : authenticateGoogleUser -> signIn', onRejected);\n        let response = new CognitoServiceResponse(RespType.ON_REJECTED, onRejected);\n        return reject(response);\n      }).catch((err) =>\n      {\n        console.error('CognitoService : authenticateGoogleUser -> signIn', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  private refreshGoogleSession() : Promise<CognitoServiceResponse>\n  {\n    let googleUser : gapi.auth2.GoogleUser = null;\n    googleUser = this.googleAuth.currentUser.get();\n\n    return new Promise((resolve, reject) =>\n    {\n      googleUser.reloadAuthResponse().then((res : gapi.auth2.AuthResponse) =>\n      {\n        this.setIdToken(res.id_token);\n        this.setExpiresAt(res.expires_at);\n        this.updateCredentials();\n\n        let response = new CognitoServiceResponse(RespType.ON_SUCCESS, res);\n        return resolve(response);\n      }).catch(err =>\n      {\n        console.error('CognitoService : refreshGoogleSession -> reloadAuthResponse', err);\n        let response = new CognitoServiceResponse(RespType.ON_FAILURE, err);\n        return reject(response);\n      });\n    });\n  }\n\n  private signOutGoogle() : void\n  {\n    this.googleAuth.signOut().then(_ =>\n    {\n      this.googleAuth.disconnect();\n    });\n  }\n\n  // !SECTION\n\n  // -------------------------------------------------------------------------------------------\n  // TODO: Facebook ----------------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  // -------------------------------------------------------------------------------------------\n  // SECTION: Private helpers ------------------------------------------------------------------\n  // -------------------------------------------------------------------------------------------\n\n  // NOTE: User --------------------------------------------------------------------------------\n\n  private setCognitoUser(username : string) : AWSCognito.CognitoUser\n  {\n    let cognitoUser : AWSCognito.CognitoUser = null;\n    let cognitoUserPool = new AWSCognito.CognitoUserPool(this.poolData);\n\n    let userData : AWSCognito.ICognitoUserData = {\n      Username   : username,\n      Pool       : cognitoUserPool\n    };\n    cognitoUser = new AWSCognito.CognitoUser(userData);\n\n    this.cognitoUser = cognitoUser; // Store the user in the service\n    this.setUsername(username); // Store the username in the local storage\n\n    return cognitoUser;\n  }\n\n  // NOTE: Session -----------------------------------------------------------------------------\n\n  private setExpiresAt(expiresAt : number) : void\n  {\n    let storageKey : string = null;\n    storageKey = this.storagePrefix + 'ExpiresAt';\n    localStorage.setItem(storageKey, expiresAt.toString());\n  }\n\n  // NOTE: Username ----------------------------------------------------------------------------\n\n  private setUsername(username : string) : void\n  {\n    let storageKey : string = null;\n    storageKey = this.storagePrefix + 'Username';\n    localStorage.setItem(storageKey, username);\n  }\n\n  // NOTE: Provider ----------------------------------------------------------------------------\n\n  private setProvider(provider : string) : void\n  {\n    let storageKey : string = null;\n    storageKey = this.storagePrefix + 'Provider';\n    localStorage.setItem(storageKey, provider);\n  }\n\n  // NOTE: Token -------------------------------------------------------------------------------\n\n  private setIdToken(token : string) : void\n  {\n    let storageKey : string = null;\n    storageKey = this.storagePrefix + 'IdToken';\n    localStorage.setItem(storageKey, token);\n  }\n\n  private setTokens(session : AWSCognito.CognitoUserSession) : void\n  {\n    let storageKey : string = null;\n    let tokensStr  : string = null;\n    let tokensObj  : any    = null;\n\n    storageKey = this.storagePrefix + 'SessionTokens';\n    tokensObj  = {\n      accessToken          : session.getAccessToken().getJwtToken(),\n      accessTokenExpiresAt : session.getAccessToken().getExpiration() * 1000, // Seconds to milliseconds\n      idToken              : session.getIdToken().getJwtToken(),\n      idTokenExpiresAt     : session.getIdToken().getExpiration() * 1000, // Seconds to milliseconds\n      refreshToken         : session.getRefreshToken().getToken()\n    };\n    tokensStr = JSON.stringify(tokensObj);\n    localStorage.setItem(storageKey, tokensStr);\n  }\n\n  private updateTokens(session : AWSCognito.CognitoUserSession) : void\n  {\n    let tokens : any = null;\n    this.setTokens(session);\n    tokens = this.getTokens();\n    this.setIdToken(tokens.idToken);\n    this.setExpiresAt(tokens.idTokenExpiresAt);\n  }\n\n  // NOTE: Storage -----------------------------------------------------------------------------\n\n  private clearStorage() : void\n  {\n    localStorage.removeItem(this.storagePrefix + 'Username');\n    localStorage.removeItem(this.storagePrefix + 'Provider');\n    localStorage.removeItem(this.storagePrefix + 'IdToken');\n    localStorage.removeItem(this.storagePrefix + 'ExpiresAt');\n    localStorage.removeItem(this.storagePrefix + 'SessionTokens');\n  }\n\n  // !SECTION\n\n}\n"],"names":["EventEmitter","AWS.STS","AWS.config","AWS.CognitoIdentityCredentials","AWSCognito.CognitoUserPool","AWS.CognitoIdentityServiceProvider","AWS.Credentials","AWSCognito.AuthenticationDetails","AWSCognito.CognitoRefreshToken","AWSCognito.CognitoUser","Injectable","Inject","Optional"],"mappings":"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"}
